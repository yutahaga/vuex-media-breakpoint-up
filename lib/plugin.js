"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const getClientWidth=()=>{if("undefined"==typeof document)return 0;return Math.max(document.documentElement.clientWidth,window.innerWidth||0)},getClientHeight=()=>{if("undefined"==typeof document)return 0;return Math.max(document.documentElement.clientHeight,window.innerHeight||0)};let supportsCaptureOption=!1;try{const t=Object.defineProperty({},"capture",{get(){supportsCaptureOption=!0}});window.addEventListener("test",()=>{},t)}catch(t){}const createSafetyEventListenerOptions=t=>supportsCaptureOption||"object"!=typeof t?t:t.capture,addEventListener=(t,e,i,n)=>{t.addEventListener(e,i,createSafetyEventListenerOptions(n))},removeEventListener=(t,e,i,n)=>{t.removeEventListener(e,i,createSafetyEventListenerOptions(n))},isString=t=>"string"==typeof t,MUTATION_CHANGE_VIEWPORT="CHANGE_VIEWPORT";class BreakpointListener{constructor({store:store,options:options}){this.matchMediaMode=!1,this.direction="width",this.client={width:0,height:0},this.breakpoints=[],this.matchValueFunction=(t=>!1),"undefined"!=typeof window&&(this.store=store,this.updateOptions(options),this.init())}init(){const t=this.onResize.bind(this);this.listener=this.debounceFunction&&this.interval?this.debounceFunction(this.interval,t):t,this.listener&&(this.onResize(),addEventListener(window,"resize",this.listener,BreakpointListener.EventListenerOptions))}destroy(){this.listener&&removeEventListener(window,"resize",this.listener,BreakpointListener.EventListenerOptions)}updateOptions(t){this.debounceFunction=t.debounceFunction||this.debounceFunction,this.interval=t.interval||this.interval,this.matchMediaMode=t.matchMediaMode||this.matchMediaMode,this.matchValueFunction=this.matchMediaMode?this.matchMedia:this.matchClient,this.direction=t.direction||this.direction,this.setBreakpoints(t.breakpoints)}setBreakpoints(t){if(this.breakpoints=Object.keys(t).sort((e,i)=>parseFloat(`${t[e]}`)<parseFloat(`${t[i]}`)?-1:1).map(e=>({name:e,value:this.normalizeBreakpointValue(t[e])})),this.breakpoints.length<2)throw new Error("You need at least 2 breakpoints.")}onResize(){this.setDimensions(),this.update()}setDimensions(){this.matchMediaMode||(this.client.width=getClientWidth(),this.client.height=getClientHeight())}normalizeBreakpointValue(t){return this.matchMediaMode?isString(t)&&BreakpointListener.UnitRegexp.test(t)?t:`${t}px`:isString(t)?parseFloat(t):t}update(){if(this.store){const t=this.getSizeName();this.sizeName?this.store.commit("CHANGE_VIEWPORT",t):(this.store.commit("CHANGE_VIEWPORT",t),setTimeout(()=>{if(!this.store)return;this.store.commit("CHANGE_VIEWPORT",t)},200)),this.sizeName=t}}getSizeName(){let t="";return this.breakpoints.some(({name:name,value:value})=>{if(this.matchValueFunction(value))return t=name,!1;return!0}),t}matchMedia(t){return window.matchMedia(`(min-${this.direction}:${t})`).matches}matchClient(t){return this.client[this.direction]>=t}}BreakpointListener.EventListenerOptions={passive:!0,capture:!1},BreakpointListener.UnitRegexp=/[^\d]+$/;const createBreakpointPlugin=t=>e=>new BreakpointListener({store:e,options:t});exports.default=createBreakpointPlugin,exports.MUTATION_CHANGE_VIEWPORT="CHANGE_VIEWPORT";
